// <auto-generated />
using System;
using Library.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240503114406_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Pages")
                        .HasColumnType("integer")
                        .HasColumnName("pages");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "C# Book For Beginners"
                        },
                        new
                        {
                            Id = 2,
                            Title = "React Volume 2"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Java"
                        },
                        new
                        {
                            Id = 4,
                            Title = "How To Use Postgres"
                        });
                });

            modelBuilder.Entity("Library.Models.Borrowing", b =>
                {
                    b.Property<DateOnly>("BorrowedDate")
                        .HasColumnType("date")
                        .HasColumnName("borrowed_date");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("BookId")
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    b.HasKey("BorrowedDate", "UserId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("borrowings");

                    b.HasData(
                        new
                        {
                            BorrowedDate = new DateOnly(2024, 1, 1),
                            UserId = 1,
                            BookId = 1
                        },
                        new
                        {
                            BorrowedDate = new DateOnly(2024, 1, 20),
                            UserId = 2,
                            BookId = 2
                        },
                        new
                        {
                            BorrowedDate = new DateOnly(2024, 1, 11),
                            UserId = 3,
                            BookId = 4
                        },
                        new
                        {
                            BorrowedDate = new DateOnly(2024, 1, 15),
                            UserId = 4,
                            BookId = 3
                        },
                        new
                        {
                            BorrowedDate = new DateOnly(2024, 2, 1),
                            UserId = 2,
                            BookId = 1
                        });
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John Doe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jane Doe"
                        },
                        new
                        {
                            Id = 3,
                            Name = "John Smith"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("Library.Models.Borrowing", b =>
                {
                    b.HasOne("Library.Models.Book", "Book")
                        .WithMany("Borrowings")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.User", "User")
                        .WithMany("Borrowings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Book", b =>
                {
                    b.Navigation("Borrowings");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Navigation("Borrowings");
                });
#pragma warning restore 612, 618
        }
    }
}
